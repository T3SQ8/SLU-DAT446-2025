* Question 3 [[https://raw.githubusercontent.com/jyp/python-courses-exams/refs/heads/main/2303/facit.org][Mars 2023]] (Easier)

In one factory, workers produce 3 types of items and they receive bonuses dependent on how
many items of each kind they have produced. The management must therefore keep track of who
has produced what.
Implement the class ItemsProduction with the following elements:
An ~__init__(bonus1,bonus2,bonus3)~ method which initializes the state of the object so that in
the beginning no one has produced anything. The arguments ~bonus1, bonus2, bonus3~
specify how much bonus each worker receives for each type of item. (2 points)
- A method ~reportItem(worker,item)~ which takes the name of the worker and the item type and stores the information in the state of the object. (5 points)
- A method ~printProduction()~ which prints on separate lines the worker's name and the number of items that he/she has produced. (5 points)
- A method ~computeBonus(worker)~ which takes the name of the worker and returns the bonus that he/she has earned. (5 points)


* Question 1 [[https://github.com/jyp/python-courses-exams/blob/main/2403/facit-vt24.org][Mars 2024]]

The period of revolution (T) of a planet is connected with the mass of
the sun M and the radius R of its orbit by the following formula,
where G is the gravitational constant:
  
  T²= (4π²/GM)R³

Write a Python function ~planet_period(name)~ which prints the period
of rotation of the planet with the given ~name~, if it is a valid
planet name. Otherwise, print "Unknown planet name".

You can assume the following data (expressed in SI units--- meters, seconds, etc.):

#+begin_src python
M = 1.991e30
G = 6.67e-11
radii = {
    "mercury": 57.9e9,
    "venus": 108.2e9,
    "earth": 149.6e9,
    "mars": 228e9,
    "jupiter": 779.3e9,
    "saturn": 1427e9,
    "uranus": 2871e9,
    "neptune": 4497e9,
    "pluto": 5913e9
}
#+end_src


* Question 3 [[https://github.com/jyp/python-courses-exams/blob/main/2403/facit-vt24.org][Mars 2024]] (Continue from Q1)

Write a class called ~Kepler~. Its goal is to record planet observations
and estimate the radius of their orbits.

The class should have the following methods:
- ~__init__(self)~ which initializes the attributes
- ~observe(self, planet_name, angle, time)~

  This method records an observation of a given planet at a given
  time, at a given angle in its orbit. You can assume that the angle
  is given in radians.

  Note: assuming two observations, respectively at times t₁,t₂ and
  angles a₁, a₂ the one can estimate the period of revolution of the
  planet to be 2π×(t₁-t₂)/(a₁-a₂).
  You can further assume that t₂ > t₁ implies a₂ > a₁ and that observations
  are reported in chronological order.

- ~get_period(self,planet_name)~ This method will return an estimation
  of the planet's period of revolution. You should compute this
  estimation averaging the estimated period of revolution for all
  /consecutive/ observations of the given planet. (Use the above formula
  for each consecutive pair of observations and take the average.)

  If there are not enough observations, this method should return ~None~.
  
- ~get_radius(self,planet_name)~

  This method will return an estimation of the planet's radius using
  the Kepler formula from Question 1 and the period estimated by ~get_period~.

    If there are not enough observations, this method should return ~None~.

- ~print_planets(self)~

   This method will print a table with every planet's name, estimated
   period and estimated radius.

   If there are not enough observations for any given planet, print
   ~None~ for period and radius.

